---
import Layout from "../layouts/Layout.astro";

const GITHUB_USERNAME = "mlemors";

// We'll fetch repositories on the client side, so no server-side fetching
const initialProjects: any[] = [];
const additionalProjects: any[] = [];
---

<style>
    body {
        font-family: 'Funnel Sans', sans-serif;
    }
    .text-gradient {
        background: linear-gradient(
            90deg,
            rgb(153, 137, 255),
            rgb(137, 247, 255)
        );
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .project-card {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
</style>

<Layout>
    <main class="max-w-2xl mx-auto px-4 py-16">
        <header class="mb-6">
            <div class="flex items-center gap-3 mb-4">
                <img
                    src="https://avatars.githubusercontent.com/u/94938407?v=4"
                    alt="mlemors"
                    class="w-16 h-16 rounded-full"
                />
                <span>
                    <h1 class="text-3xl font-bold">
                        Hey I'm
                        <span class="text-gradient">mlemors</span>
                            üëã
                    </h1>

                    <p class="text-gray-400">A software developer from germany.</p>
                </span>
            </div>
            <p class="text-gray-300">
                I enjoy building apps that make my life easier. So far my favorite thing is to scrape informations from websites and automate stuff. 
                At work, I mainly use C# .NET, but I'm currently learning TypeScript and React to create web applications, along with some Python.
            </p>
        </header>
        <section>
                <h2 class="text-2xl font-bold">Projects</h2>
                <p class="text-gray-300 mb-2">
                    Here you can find some projects im working on, all open source available on GitHub.
                </p>
                <div class="flex justify-end mb-1">
                    <span class="text-xs text-gray-500">ordered by Last updated</span>
                </div>
                
                <!-- Loading indicator -->
                <div id="loading-indicator" class="text-center py-8">
                    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-300"></div>
                    <p class="text-gray-400 mt-2">Loading repositories...</p>
                </div>
                
                <!-- Error message -->
                <div id="error-message" class="hidden text-center py-8">
                    <p class="text-red-400">Failed to load repositories. Please try again later.</p>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 hidden" id="projects-grid">
                    <!-- Projects will be loaded here dynamically -->
                </div>
                
                <div class="text-center mt-4 hidden" id="show-more-container">
                    <button 
                        id="show-more-btn"
                        class="text-sm text-gray-400 hover:text-gray-300 transition-colors cursor-pointer border border-gray-800 hover:border-gray-700 px-4 py-2 rounded-lg"
                    >
                        Show more
                    </button>
                </div>

                <br/>
                <p class="text-gray-300 text-xs mt-2 mr-2 ml-2 text-center">As a backend developer, I'm not that confident in creating frontend, but this works for me.</p>
        </section>
        <footer class="text-center text-gray-500 text-xs mt-2">
            <p>made with <a href="https://github.com/withastro/astro" target="_blank" class="text-gradient">Astro</a> and much ‚ù§Ô∏è by mlemors</p>
            <p>This site is under the <a href="https://github.com/mlemors/mlemors-Astro/blob/master/LICENSE" target="_blank" class="text-gradient">GPLv3.0</a> License</p>
        </footer>
    </main>
</Layout>

<script>
    if (typeof window !== 'undefined') {
        const GITHUB_USERNAME = "mlemors";
        
        // Fetch all repositories from a user's GitHub account
        const fetchAllUserRepos = async (username: string) => {
            try {
                let allRepos: any[] = [];
                let page = 1;
                const perPage = 100; // GitHub API max per page
                
                while (true) {
                    const response = await fetch(
                        `https://api.github.com/users/${username}/repos?page=${page}&per_page=${perPage}&sort=updated&type=all`
                    );
                    
                    if (!response.ok) {
                        throw new Error(`Failed to fetch repositories for ${username}: ${response.status}`);
                    }
                    
                    const repos = await response.json();
                    
                    if (repos.length === 0) {
                        break; // No more repositories
                    }
                    
                    allRepos.push(...repos);
                    page++;
                    
                    // If we got less than perPage repos, we've reached the end
                    if (repos.length < perPage) {
                        break;
                    }
                }
                
                return allRepos;
            } catch (error) {
                console.error(`Error fetching repositories for ${username}:`, error);
                throw error;
            }
        };

        // Filter and process repositories
        const processRepositories = (repos: any[]) => {
            return repos
                .filter((repo: any) => {
                    // Only filter out archived repositories, keep both original and forked repos
                    return !repo.archived;
                })
                .sort((a: any, b: any) => {
                    // Sort by last updated date (most recent first)
                    return new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime();
                })
                .map((repo: any) => ({
                    name: repo.name,
                    html_url: repo.html_url,
                    description: repo.description || "No description available",
                    owner: {
                        login: repo.owner.login,
                        avatar_url: repo.owner.avatar_url
                    },
                    stargazers_count: repo.stargazers_count,
                    language: repo.language,
                    updated_at: repo.updated_at,
                    created_at: repo.created_at,
                    fork: repo.fork
                }));
        };

        // Create project card HTML
        const createProjectCard = (project: any) => {
            return `
                <a
                    href="${project.html_url}"
                    target="_blank"
                    class="project-card block p-4 border border-gray-800 rounded-lg hover:border-gray-700 transition-colors"
                >
                    <div>
                        <div class="flex items-center gap-2 mb-2">
                            <img
                                src="${project.owner.avatar_url}"
                                alt="${project.owner.login}"
                                class="w-5 h-5 rounded-full"
                            />
                            <span class="text-sm text-gray-400">
                                ${project.owner.login}
                            </span>
                        </div>
                        <h3 class="font-semibold mb-1 flex items-center gap-2">
                            ${project.name}
                            ${project.fork ? '<span class="text-xs px-2 py-0.5 bg-gray-800 text-gray-300 rounded-full border border-gray-700">Fork</span>' : ''}
                        </h3>
                        <p class="text-sm text-gray-400 mb-3 line-clamp-2">
                            ${project.description}
                        </p>
                    </div>
                    <div class="flex items-center gap-4 text-sm text-gray-400">
                        <div class="flex items-center gap-1">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="w-4 h-4"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                            >
                                <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
                            </svg>
                            <span>${project.stargazers_count}</span>
                        </div>
                        ${project.language ? `
                            <div class="flex items-center gap-1">
                                <span class="w-2 h-2 rounded-full bg-gray-400"></span>
                                <span>${project.language}</span>
                            </div>
                        ` : ''}
                    </div>
                </a>
            `;
        };

        // Load and display repositories
        const loadRepositories = async () => {
            const loadingIndicator = document.getElementById('loading-indicator');
            const errorMessage = document.getElementById('error-message');
            const projectsGrid = document.getElementById('projects-grid');
            const showMoreContainer = document.getElementById('show-more-container');
            const showMoreBtn = document.getElementById('show-more-btn');

            if (!loadingIndicator || !errorMessage || !projectsGrid || !showMoreContainer || !showMoreBtn) {
                console.error('Required DOM elements not found');
                return;
            }

            try {
                // Fetch repositories
                const allRepos = await fetchAllUserRepos(GITHUB_USERNAME);
                const projects = processRepositories(allRepos);

                // Split projects into initial and additional
                const initialProjects = projects.slice(0, 8);
                const additionalProjects = projects.slice(8);

                // Hide loading indicator
                loadingIndicator.classList.add('hidden');
                
                // Show projects grid
                projectsGrid.classList.remove('hidden');

                // Populate initial projects
                initialProjects.forEach((project: any) => {
                    projectsGrid.innerHTML += createProjectCard(project);
                });

                // Setup show more functionality if there are additional projects
                if (additionalProjects.length > 0) {
                    showMoreContainer.classList.remove('hidden');
                    showMoreBtn.textContent = `Show more (${additionalProjects.length})`;
                    
                    showMoreBtn.addEventListener('click', function() {
                        additionalProjects.forEach((project: any) => {
                            projectsGrid.innerHTML += createProjectCard(project);
                        });
                        showMoreContainer.classList.add('hidden');
                    });
                }

            } catch (error) {
                // Hide loading indicator and show error
                loadingIndicator.classList.add('hidden');
                errorMessage.classList.remove('hidden');
                console.error('Failed to load repositories:', error);
            }
        };

        // Load repositories when the page is ready
        document.addEventListener('DOMContentLoaded', loadRepositories);
    }
</script>
